{"version":3,"sources":["../../src/routes/employee.js"],"names":["getData","req","res","empSql","getEmpData","getEmp","json","result","register","body","name","dept","addEmpData","addEmp","result1","registerUser","email","password","error","hashPassword","addUserData","loginUser","searchUserData","searchEmp"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEO,IAAMA;AAAA,wFAAU,iBAAOC,GAAP,EAAWC,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACEC,mBAAQC,UAAR,EADF;;AAAA;AACbC,8BADa;;AAEnBH,4BAAII,IAAJ,CAAS,EAACC,QAAOF,MAAR,EAAT;;AAFmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAV;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAKA,IAAMG;AAAA,yFAAW,kBAAOP,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oCACCD,IAAIQ,IADL,EACbC,IADa,aACbA,IADa,EACPC,IADO,aACPA,IADO;AAAA;AAAA,+BAECR,mBAAOS,UAAP,CAAkBF,IAAlB,EAAwBC,IAAxB,CAFD;;AAAA;AAEdE,8BAFc;;AAGpBX,4BAAII,IAAJ,CAAS,EAACQ,SAAQD,MAAT,EAAT;;AAHoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAX;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAMA,IAAME;AAAA,yFAAe,kBAAOd,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,qCACQD,IAAIQ,IADZ,EACjBC,IADiB,cACjBA,IADiB,EACXM,KADW,cACXA,KADW,EACJC,QADI,cACJA,QADI;;AAAA,8BAErB,CAACP,IAAD,IAAS,CAACM,KAAV,IAAmB,CAACC,QAFC;AAAA;AAAA;AAAA;;AAAA,0DAGdf,IAAII,IAAJ,CAAS,EAACY,OAAQ,wBAAT,EAAT,CAHc;;AAAA;AAKlBC,oCALkB,GAKF,kBAAIF,QAAJ,CALE;AAAA;AAAA,+BAMHd,mBAAOiB,WAAP,CAAmBV,IAAnB,EAAyBM,KAAzB,EAAgCG,YAAhC,CANG;;AAAA;AAMlBN,8BANkB;;AAOxBX,4BAAII,IAAJ,CAAS,EAACQ,SAAQD,MAAT,EAAT;;AAPwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAf;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAUA,IAAMQ;AAAA,yFAAY,kBAAOpB,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,qCACKD,IAAIQ,IADT,EACdO,KADc,cACdA,KADc,EACPC,QADO,cACPA,QADO;;AAAA,8BAElB,CAACD,KAAD,IAAU,CAACC,QAFO;AAAA;AAAA;AAAA;;AAAA,0DAGXf,IAAII,IAAJ,CAAS,EAACY,OAAQ,wBAAT,EAAT,CAHW;;AAAA;AAKfC,oCALe,GAKC,kBAAIF,QAAJ,CALD;AAAA;AAAA,+BAMGd,mBAAOmB,cAAP,CAAsBN,KAAtB,EAA6BG,YAA7B,CANH;;AAAA;AAMfI,iCANe;;AAOrB,4BAAG,qBAAQA,SAAR,CAAH,EACIrB,IAAII,IAAJ,CAAS,EAACY,OAAO,gCAAR,EAAT;AACJhB,4BAAII,IAAJ,CAASiB,UAAU,CAAV,CAAT;;AATqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAZ;;AAAA;AAAA;AAAA;AAAA,GAAN","file":"employee.js","sourcesContent":["import MD5 from 'md5';\r\nimport empSql from '../sql/employee'\r\nimport {isEmpty} from 'lodash';\r\n\r\nexport const getData = async (req,res) => {\r\n    const getEmp = await empSql. getEmpData();\r\n    res.json({result:getEmp})\r\n}\r\n\r\nexport const register = async (req, res) =>{\r\n    const {name, dept} = req.body;\r\n    const addEmp = await empSql.addEmpData(name, dept);\r\n    res.json({result1:addEmp})\r\n}\r\n\r\nexport const registerUser = async (req, res) =>{\r\n    const {name, email, password} = req.body;    \r\n    if(!name || !email || !password)\r\n       return res.json({error : \"Please fill all fields\"})\r\n      \r\n    const hashPassword =  MD5(password);\r\n    const addEmp = await empSql.addUserData(name, email, hashPassword);\r\n    res.json({result1:addEmp})\r\n}\r\n\r\nexport const loginUser = async (req, res) =>{\r\n    const {email, password} = req.body;    \r\n    if(!email || !password)\r\n       return res.json({error : \"Please fill all fields\"})\r\n      \r\n    const hashPassword =  MD5(password);\r\n    const searchEmp = await empSql.searchUserData(email, hashPassword);\r\n    if(isEmpty(searchEmp))\r\n        res.json({error :'email or password is not valid'})\r\n    res.json(searchEmp[0])\r\n}\r\n"]}